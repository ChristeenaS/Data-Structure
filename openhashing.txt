#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *link;
}*temp;
int size;
void insert(int key,struct node* a[]){
    int i;
    struct node *newnode;
    newnode=(struct node*) malloc(sizeof(struct node));
    newnode->data=key;
    newnode->link=NULL;
    i=key%size;
    if(a[i]!=NULL)
        a[i]=newnode;
    else{
        temp=a[i];
        while(temp->link){
            temp=temp->link;
        }
        temp->link=newnode;
    }
}
void display(struct node* a[]){
    for(int i=0;i<size;i++)
        if(a[i]==NULL){
            printf("empty");
            return;
        }
        else{
            printf("Elements in place %d are:\n",i);
            temp=a[i];
            while(temp!=NULL){
                printf("%d",temp->data);
                temp=temp->link;
            }
        }
    }
int search(int key,struct node* a[]){
	int i,flag=0;
	i=key%size;
	temp=a[i];
	while(temp){
		if(temp->data==key){
			flag=1;
		}
		temp=temp->link;
	}
	if(flag==1)
		printf("Element found at position %d",i);
	else
		printf("Element not found");
}
void main()
{
    int ch,key,i,n;
    printf("Enter the size of array:");
    scanf("%d",&size);
    struct node* a[size];
    for(i=0;i<size;i++){
        a[i]=NULL;
    }
    while(1){
        printf("Enter your choice:");
        printf("\n1.INSERTION\n2.DISPLAY\n3.SEARCH\n4.EXIT\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:
                printf("Enter element to insert:\n");
                scanf("%d",&key);
                insert(key,a);
                break;
            case 2:
                display(a);
                break;
            case 3:
                printf("Enter element to search:\n");
                scanf("%d",&key);
                search(key,a);
                break;
            case 4:
                printf("EXIT");
                exit(0);
            default:
                printf("Invalid choice\n");
                continue;
            
        }
    }
}
